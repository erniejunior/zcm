/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package zcmtypes;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class array_const_size1 implements zcm.zcm.ZCMEncodable
{
    public byte i8[];
    public short i16[];
    public int i32[];
    public long i64[];
    public float f[];
    public double d[];
    public String s[];
    public boolean bl[];
    public byte b[];
 
    public array_const_size1()
    {
        i8 = new byte[1];
        i16 = new short[2];
        i32 = new int[3];
        i64 = new long[4];
        f = new float[5];
        d = new double[6];
        s = new String[7];
        bl = new boolean[8];
        b = new byte[9];
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0xbb93d1c57076cddbL;
 
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(zcmtypes.array_const_size1.class))
            return 0L;
 
        classes.add(zcmtypes.array_const_size1.class);
        long hash = ZCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.write(this.i8, 0, 1);
 
        for (int a = 0; a < 2; a++) {
            outs.writeShort(this.i16[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.i32[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeLong(this.i64[a]); 
        }
 
        for (int a = 0; a < 5; a++) {
            outs.writeFloat(this.f[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.d[a]); 
        }
 
        for (int a = 0; a < 7; a++) {
            __strbuf = new char[this.s[a].length()]; this.s[a].getChars(0, this.s[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < 8; a++) {
            outs.writeByte( this.bl[a] ? 1 : 0); 
        }
 
        outs.write(this.b, 0, 9);
 
    }
 
    public array_const_size1(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public array_const_size1(DataInput ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static zcmtypes.array_const_size1 _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        zcmtypes.array_const_size1 o = new zcmtypes.array_const_size1();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.i8 = new byte[(int) 1];
        ins.readFully(this.i8, 0, 1); 
        this.i16 = new short[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.i16[a] = ins.readShort();
        }
 
        this.i32 = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.i32[a] = ins.readInt();
        }
 
        this.i64 = new long[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.i64[a] = ins.readLong();
        }
 
        this.f = new float[(int) 5];
        for (int a = 0; a < 5; a++) {
            this.f[a] = ins.readFloat();
        }
 
        this.d = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.d[a] = ins.readDouble();
        }
 
        this.s = new String[(int) 7];
        for (int a = 0; a < 7; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.s[a] = new String(__strbuf);
        }
 
        this.bl = new boolean[(int) 8];
        for (int a = 0; a < 8; a++) {
            this.bl[a] = ins.readByte()!=0;
        }
 
        this.b = new byte[(int) 9];
        ins.readFully(this.b, 0, 9); 
    }
 
    public zcmtypes.array_const_size1 copy()
    {
        zcmtypes.array_const_size1 outobj = new zcmtypes.array_const_size1();
        outobj.i8 = new byte[(int) 1];
        System.arraycopy(this.i8, 0, outobj.i8, 0, 1); 
        outobj.i16 = new short[(int) 2];
        System.arraycopy(this.i16, 0, outobj.i16, 0, 2); 
        outobj.i32 = new int[(int) 3];
        System.arraycopy(this.i32, 0, outobj.i32, 0, 3); 
        outobj.i64 = new long[(int) 4];
        System.arraycopy(this.i64, 0, outobj.i64, 0, 4); 
        outobj.f = new float[(int) 5];
        System.arraycopy(this.f, 0, outobj.f, 0, 5); 
        outobj.d = new double[(int) 6];
        System.arraycopy(this.d, 0, outobj.d, 0, 6); 
        outobj.s = new String[(int) 7];
        System.arraycopy(this.s, 0, outobj.s, 0, 7); 
        outobj.bl = new boolean[(int) 8];
        System.arraycopy(this.bl, 0, outobj.bl, 0, 8); 
        outobj.b = new byte[(int) 9];
        System.arraycopy(this.b, 0, outobj.b, 0, 9); 
        return outobj;
    }
 
}

