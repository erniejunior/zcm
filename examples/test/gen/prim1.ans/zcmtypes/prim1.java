/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package zcmtypes;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class prim1 implements zcm.zcm.ZCMEncodable
{
    public byte i8;
    public short i16;
    public int i32;
    public long i64;
    public float f;
    public double d;
    public String s;
    public boolean bl;
    public byte b;
 
    public prim1()
    {
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0x0c7cd031e3f10c81L;
 
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(zcmtypes.prim1.class))
            return 0L;
 
        classes.add(zcmtypes.prim1.class);
        long hash = ZCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeByte(this.i8); 
 
        outs.writeShort(this.i16); 
 
        outs.writeInt(this.i32); 
 
        outs.writeLong(this.i64); 
 
        outs.writeFloat(this.f); 
 
        outs.writeDouble(this.d); 
 
        __strbuf = new char[this.s.length()]; this.s.getChars(0, this.s.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeByte( this.bl ? 1 : 0); 
 
        outs.writeByte(this.b); 
 
    }
 
    public prim1(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public prim1(DataInput ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static zcmtypes.prim1 _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        zcmtypes.prim1 o = new zcmtypes.prim1();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.i8 = ins.readByte();
 
        this.i16 = ins.readShort();
 
        this.i32 = ins.readInt();
 
        this.i64 = ins.readLong();
 
        this.f = ins.readFloat();
 
        this.d = ins.readDouble();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.s = new String(__strbuf);
 
        this.bl = ins.readByte()!=0;
 
        this.b = ins.readByte();
 
    }
 
    public zcmtypes.prim1 copy()
    {
        zcmtypes.prim1 outobj = new zcmtypes.prim1();
        outobj.i8 = this.i8;
 
        outobj.i16 = this.i16;
 
        outobj.i32 = this.i32;
 
        outobj.i64 = this.i64;
 
        outobj.f = this.f;
 
        outobj.d = this.d;
 
        outobj.s = this.s;
 
        outobj.bl = this.bl;
 
        outobj.b = this.b;
 
        return outobj;
    }
 
}

