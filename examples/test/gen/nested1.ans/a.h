// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _a_h
#define _a_h

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _a a;
struct _a
{
    int32_t    val;
};

/**
 * Create a deep copy of a a.
 * When no longer needed, destroy it with a_destroy()
 */
a* a_copy(const a* to_copy);

/**
 * Destroy an instance of a created by a_copy()
 */
void a_destroy(a* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _a_subscription_t a_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * a is received.
 */
typedef void(*a_handler_t)(const zcm_recv_buf_t *rbuf,
             const char *channel, const a *msg, void *userdata);

/**
 * Publish a message of type a using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int a_publish(zcm_t *zcm, const char *channel, const a *msg);

/**
 * Subscribe to messages of type a using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to a_unsubscribe.
 */
a_subscription_t* a_subscribe(zcm_t *zcm, const char *channel, a_handler_t handler, void *userdata);

/**
 * Removes and destroys a subscription created by a_subscribe()
 */
int a_unsubscribe(zcm_t *zcm, a_subscription_t* hid);
/**
 * Encode a message of type a into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to a_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int a_encode(void *buf, int offset, int maxlen, const a *p);

/**
 * Decode a message of type a from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with a_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int a_decode(const void *buf, int offset, int maxlen, a *msg);

/**
 * Release resources allocated by a_decode()
 * @return 0
 */
int a_decode_cleanup(a *p);

/**
 * Check how many bytes are required to encode a message of type a
 */
int a_encoded_size(const a *p);

// ZCM support functions. Users should not call these
int64_t __a_get_hash(void);
uint64_t __a_hash_recursive(const __zcm_hash_ptr *p);
int     __a_encode_array(void *buf, int offset, int maxlen, const a *p, int elements);
int     __a_decode_array(const void *buf, int offset, int maxlen, a *p, int elements);
int     __a_decode_array_cleanup(a *p, int elements);
int     __a_encoded_array_size(const a *p, int elements);
int     __a_clone_array(const a *p, a *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
