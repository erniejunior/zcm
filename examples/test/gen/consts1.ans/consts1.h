// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _consts1_h
#define _consts1_h

#ifdef __cplusplus
extern "C" {
#endif

#define CONSTS1_k8 1
#define CONSTS1_k16 2
#define CONSTS1_i32 3
#define CONSTS1_i64 4LL
#define CONSTS1_f 5.0
#define CONSTS1_d 6.0

typedef struct _consts1 consts1;
struct _consts1
{
};

/**
 * Create a deep copy of a consts1.
 * When no longer needed, destroy it with consts1_destroy()
 */
consts1* consts1_copy(const consts1* to_copy);

/**
 * Destroy an instance of consts1 created by consts1_copy()
 */
void consts1_destroy(consts1* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _consts1_subscription_t consts1_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * consts1 is received.
 */
typedef void(*consts1_handler_t)(const zcm_recv_buf_t *rbuf,
             const char *channel, const consts1 *msg, void *userdata);

/**
 * Publish a message of type consts1 using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int consts1_publish(zcm_t *zcm, const char *channel, const consts1 *msg);

/**
 * Subscribe to messages of type consts1 using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to consts1_unsubscribe.
 */
consts1_subscription_t* consts1_subscribe(zcm_t *zcm, const char *channel, consts1_handler_t handler, void *userdata);

/**
 * Removes and destroys a subscription created by consts1_subscribe()
 */
int consts1_unsubscribe(zcm_t *zcm, consts1_subscription_t* hid);
/**
 * Encode a message of type consts1 into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to consts1_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int consts1_encode(void *buf, int offset, int maxlen, const consts1 *p);

/**
 * Decode a message of type consts1 from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with consts1_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int consts1_decode(const void *buf, int offset, int maxlen, consts1 *msg);

/**
 * Release resources allocated by consts1_decode()
 * @return 0
 */
int consts1_decode_cleanup(consts1 *p);

/**
 * Check how many bytes are required to encode a message of type consts1
 */
int consts1_encoded_size(const consts1 *p);

// ZCM support functions. Users should not call these
int64_t __consts1_get_hash(void);
uint64_t __consts1_hash_recursive(const __zcm_hash_ptr *p);
int     __consts1_encode_array(void *buf, int offset, int maxlen, const consts1 *p, int elements);
int     __consts1_decode_array(const void *buf, int offset, int maxlen, consts1 *p, int elements);
int     __consts1_decode_array_cleanup(consts1 *p, int elements);
int     __consts1_encoded_array_size(const consts1 *p, int elements);
int     __consts1_clone_array(const consts1 *p, consts1 *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
