/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __array_var_size1_hpp__
#define __array_var_size1_hpp__

#include <vector>
#include <string>


class array_var_size1
{
    public:
        int8_t     k1;

        int16_t    k2;

        int32_t    k3;

        int64_t    k4;

        std::vector< int8_t > i8_1;

        std::vector< int8_t > i8_2;

        std::vector< int8_t > i8_3;

        std::vector< int8_t > i8_4;

        std::vector< int16_t > i16_1;

        std::vector< int16_t > i16_2;

        std::vector< int16_t > i16_3;

        std::vector< int16_t > i16_4;

        std::vector< int32_t > i32_1;

        std::vector< int32_t > i32_2;

        std::vector< int32_t > i32_3;

        std::vector< int32_t > i32_4;

        std::vector< int64_t > i64_1;

        std::vector< int64_t > i64_2;

        std::vector< int64_t > i64_3;

        std::vector< int64_t > i64_4;

        std::vector< float > f_1;

        std::vector< float > f_2;

        std::vector< float > f_3;

        std::vector< float > f_4;

        std::vector< double > d_1;

        std::vector< double > d_2;

        std::vector< double > d_3;

        std::vector< double > d_4;

        std::vector< std::string > s_1;

        std::vector< std::string > s_2;

        std::vector< std::string > s_3;

        std::vector< std::string > s_4;

        std::vector< int8_t > bl_1;

        std::vector< int8_t > bl_2;

        std::vector< int8_t > bl_3;

        std::vector< int8_t > bl_4;

        std::vector< uint8_t > b_1;

        std::vector< uint8_t > b_2;

        std::vector< uint8_t > b_3;

        std::vector< uint8_t > b_4;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "array_var_size1"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr *p);
};

int array_var_size1::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int array_var_size1::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int array_var_size1::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t array_var_size1::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* array_var_size1::getTypeName()
{
    return "array_var_size1";
}

int array_var_size1::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->k1, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->k2, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->k3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->k4, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->k1 > 0) {
        tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->i8_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2 > 0) {
        tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->i8_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3 > 0) {
        tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->i8_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4 > 0) {
        tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->i8_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1 > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->i16_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2 > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->i16_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3 > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->i16_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4 > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->i16_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1 > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->i32_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2 > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->i32_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3 > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->i32_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4 > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->i32_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1 > 0) {
        tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->i64_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2 > 0) {
        tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->i64_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3 > 0) {
        tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->i64_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4 > 0) {
        tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->i64_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1 > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->f_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2 > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->f_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3 > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->f_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4 > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->f_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->d_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->d_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->d_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->d_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->k1; a0++) {
        char* __cstr = (char*) this->s_1[a0].c_str();
        tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->k2; a0++) {
        char* __cstr = (char*) this->s_2[a0].c_str();
        tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->k3; a0++) {
        char* __cstr = (char*) this->s_3[a0].c_str();
        tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->k4; a0++) {
        char* __cstr = (char*) this->s_4[a0].c_str();
        tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1 > 0) {
        tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->bl_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2 > 0) {
        tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->bl_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3 > 0) {
        tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->bl_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4 > 0) {
        tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->bl_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1 > 0) {
        tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->b_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2 > 0) {
        tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->b_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3 > 0) {
        tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->b_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4 > 0) {
        tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->b_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int array_var_size1::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->k1, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->k2, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->k3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->k4, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->k1) {
        this->i8_1.resize(this->k1);
        tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->i8_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2) {
        this->i8_2.resize(this->k2);
        tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->i8_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3) {
        this->i8_3.resize(this->k3);
        tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->i8_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4) {
        this->i8_4.resize(this->k4);
        tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->i8_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1) {
        this->i16_1.resize(this->k1);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->i16_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2) {
        this->i16_2.resize(this->k2);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->i16_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3) {
        this->i16_3.resize(this->k3);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->i16_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4) {
        this->i16_4.resize(this->k4);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->i16_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1) {
        this->i32_1.resize(this->k1);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->i32_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2) {
        this->i32_2.resize(this->k2);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->i32_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3) {
        this->i32_3.resize(this->k3);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->i32_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4) {
        this->i32_4.resize(this->k4);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->i32_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1) {
        this->i64_1.resize(this->k1);
        tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->i64_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2) {
        this->i64_2.resize(this->k2);
        tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->i64_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3) {
        this->i64_3.resize(this->k3);
        tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->i64_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4) {
        this->i64_4.resize(this->k4);
        tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->i64_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1) {
        this->f_1.resize(this->k1);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->f_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2) {
        this->f_2.resize(this->k2);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->f_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3) {
        this->f_3.resize(this->k3);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->f_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4) {
        this->f_4.resize(this->k4);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->f_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1) {
        this->d_1.resize(this->k1);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->d_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2) {
        this->d_2.resize(this->k2);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->d_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3) {
        this->d_3.resize(this->k3);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->d_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4) {
        this->d_4.resize(this->k4);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->d_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    this->s_1.resize(this->k1);
    for (int a0 = 0; a0 < this->k1; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->s_1[a0].assign(((const char*)buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    this->s_2.resize(this->k2);
    for (int a0 = 0; a0 < this->k2; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->s_2[a0].assign(((const char*)buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    this->s_3.resize(this->k3);
    for (int a0 = 0; a0 < this->k3; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->s_3[a0].assign(((const char*)buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    this->s_4.resize(this->k4);
    for (int a0 = 0; a0 < this->k4; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->s_4[a0].assign(((const char*)buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    if(this->k1) {
        this->bl_1.resize(this->k1);
        tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->bl_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2) {
        this->bl_2.resize(this->k2);
        tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->bl_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3) {
        this->bl_3.resize(this->k3);
        tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->bl_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4) {
        this->bl_4.resize(this->k4);
        tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->bl_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k1) {
        this->b_1.resize(this->k1);
        tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->b_1[0], this->k1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k2) {
        this->b_2.resize(this->k2);
        tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->b_2[0], this->k2);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k3) {
        this->b_3.resize(this->k3);
        tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->b_3[0], this->k3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->k4) {
        this->b_4.resize(this->k4);
        tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->b_4[0], this->k4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int array_var_size1::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, this->k1);
    enc_size += __int8_t_encoded_array_size(NULL, this->k2);
    enc_size += __int8_t_encoded_array_size(NULL, this->k3);
    enc_size += __int8_t_encoded_array_size(NULL, this->k4);
    enc_size += __int16_t_encoded_array_size(NULL, this->k1);
    enc_size += __int16_t_encoded_array_size(NULL, this->k2);
    enc_size += __int16_t_encoded_array_size(NULL, this->k3);
    enc_size += __int16_t_encoded_array_size(NULL, this->k4);
    enc_size += __int32_t_encoded_array_size(NULL, this->k1);
    enc_size += __int32_t_encoded_array_size(NULL, this->k2);
    enc_size += __int32_t_encoded_array_size(NULL, this->k3);
    enc_size += __int32_t_encoded_array_size(NULL, this->k4);
    enc_size += __int64_t_encoded_array_size(NULL, this->k1);
    enc_size += __int64_t_encoded_array_size(NULL, this->k2);
    enc_size += __int64_t_encoded_array_size(NULL, this->k3);
    enc_size += __int64_t_encoded_array_size(NULL, this->k4);
    enc_size += __float_encoded_array_size(NULL, this->k1);
    enc_size += __float_encoded_array_size(NULL, this->k2);
    enc_size += __float_encoded_array_size(NULL, this->k3);
    enc_size += __float_encoded_array_size(NULL, this->k4);
    enc_size += __double_encoded_array_size(NULL, this->k1);
    enc_size += __double_encoded_array_size(NULL, this->k2);
    enc_size += __double_encoded_array_size(NULL, this->k3);
    enc_size += __double_encoded_array_size(NULL, this->k4);
    for (int a0 = 0; a0 < this->k1; a0++) {
        enc_size += this->s_1[a0].size() + 4 + 1;
    }
    for (int a0 = 0; a0 < this->k2; a0++) {
        enc_size += this->s_2[a0].size() + 4 + 1;
    }
    for (int a0 = 0; a0 < this->k3; a0++) {
        enc_size += this->s_3[a0].size() + 4 + 1;
    }
    for (int a0 = 0; a0 < this->k4; a0++) {
        enc_size += this->s_4[a0].size() + 4 + 1;
    }
    enc_size += __boolean_encoded_array_size(NULL, this->k1);
    enc_size += __boolean_encoded_array_size(NULL, this->k2);
    enc_size += __boolean_encoded_array_size(NULL, this->k3);
    enc_size += __boolean_encoded_array_size(NULL, this->k4);
    enc_size += __byte_encoded_array_size(NULL, this->k1);
    enc_size += __byte_encoded_array_size(NULL, this->k2);
    enc_size += __byte_encoded_array_size(NULL, this->k3);
    enc_size += __byte_encoded_array_size(NULL, this->k4);
    return enc_size;
}

uint64_t array_var_size1::_computeHash(const __zcm_hash_ptr *)
{
    uint64_t hash = (uint64_t)0xd3b4ee3fab9e2e02LL;
    return (hash<<1) + ((hash>>63)&1);
}

#endif
