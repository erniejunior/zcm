/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package zcmtypes;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class array_multidim1 implements zcm.zcm.ZCMEncodable
{
    public double arr1[][][][];
    public int i1;
    public short i2;
    public double arr2[][][][];
    public double arr3[][][][];
 
    public array_multidim1()
    {
        arr1 = new double[2][3][4][5];
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0x2ec8cd78def3a21eL;
 
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(zcmtypes.array_multidim1.class))
            return 0L;
 
        classes.add(zcmtypes.array_multidim1.class);
        long hash = ZCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 2; a++) {
            for (int b = 0; b < 3; b++) {
                for (int c = 0; c < 4; c++) {
                    for (int d = 0; d < 5; d++) {
                        outs.writeDouble(this.arr1[a][b][c][d]); 
                    }
                }
            }
        }
 
        outs.writeInt(this.i1); 
 
        outs.writeShort(this.i2); 
 
        for (int a = 0; a < this.i1; a++) {
            for (int b = 0; b < 3; b++) {
                for (int c = 0; c < this.i2; c++) {
                    for (int d = 0; d < 5; d++) {
                        outs.writeDouble(this.arr2[a][b][c][d]); 
                    }
                }
            }
        }
 
        for (int a = 0; a < 2; a++) {
            for (int b = 0; b < this.i2; b++) {
                for (int c = 0; c < 4; c++) {
                    for (int d = 0; d < this.i1; d++) {
                        outs.writeDouble(this.arr3[a][b][c][d]); 
                    }
                }
            }
        }
 
    }
 
    public array_multidim1(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public array_multidim1(DataInput ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static zcmtypes.array_multidim1 _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        zcmtypes.array_multidim1 o = new zcmtypes.array_multidim1();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.arr1 = new double[(int) 2][(int) 3][(int) 4][(int) 5];
        for (int a = 0; a < 2; a++) {
            for (int b = 0; b < 3; b++) {
                for (int c = 0; c < 4; c++) {
                    for (int d = 0; d < 5; d++) {
                        this.arr1[a][b][c][d] = ins.readDouble();
                    }
                }
            }
        }
 
        this.i1 = ins.readInt();
 
        this.i2 = ins.readShort();
 
        this.arr2 = new double[(int) i1][(int) 3][(int) i2][(int) 5];
        for (int a = 0; a < this.i1; a++) {
            for (int b = 0; b < 3; b++) {
                for (int c = 0; c < this.i2; c++) {
                    for (int d = 0; d < 5; d++) {
                        this.arr2[a][b][c][d] = ins.readDouble();
                    }
                }
            }
        }
 
        this.arr3 = new double[(int) 2][(int) i2][(int) 4][(int) i1];
        for (int a = 0; a < 2; a++) {
            for (int b = 0; b < this.i2; b++) {
                for (int c = 0; c < 4; c++) {
                    for (int d = 0; d < this.i1; d++) {
                        this.arr3[a][b][c][d] = ins.readDouble();
                    }
                }
            }
        }
 
    }
 
    public zcmtypes.array_multidim1 copy()
    {
        zcmtypes.array_multidim1 outobj = new zcmtypes.array_multidim1();
        outobj.arr1 = new double[(int) 2][(int) 3][(int) 4][(int) 5];
        for (int a = 0; a < 2; a++) {
            for (int b = 0; b < 3; b++) {
                for (int c = 0; c < 4; c++) {
                    System.arraycopy(this.arr1[a][b][c], 0, outobj.arr1[a][b][c], 0, 5);                }
            }
        }
 
        outobj.i1 = this.i1;
 
        outobj.i2 = this.i2;
 
        outobj.arr2 = new double[(int) i1][(int) 3][(int) i2][(int) 5];
        for (int a = 0; a < this.i1; a++) {
            for (int b = 0; b < 3; b++) {
                for (int c = 0; c < this.i2; c++) {
                    System.arraycopy(this.arr2[a][b][c], 0, outobj.arr2[a][b][c], 0, 5);                }
            }
        }
 
        outobj.arr3 = new double[(int) 2][(int) i2][(int) 4][(int) i1];
        for (int a = 0; a < 2; a++) {
            for (int b = 0; b < this.i2; b++) {
                for (int c = 0; c < 4; c++) {
                    if (this.i1 > 0)
                        System.arraycopy(this.arr3[a][b][c], 0, outobj.arr3[a][b][c], 0, this.i1);                }
            }
        }
 
        return outobj;
    }
 
}

