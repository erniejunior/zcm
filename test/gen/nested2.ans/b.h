// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _b_h
#define _b_h

#ifdef __cplusplus
extern "C" {
#endif

#include "a.h"
typedef struct _b b;
struct _b
{
    int32_t    val2;
    a          a_;
};

/**
 * Create a deep copy of a b.
 * When no longer needed, destroy it with b_destroy()
 */
b* b_copy(const b* to_copy);

/**
 * Destroy an instance of b created by b_copy()
 */
void b_destroy(b* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _b_subscription_t b_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * b is received.
 */
typedef void(*b_handler_t)(const zcm_recv_buf_t *rbuf,
             const char *channel, const b *msg, void *userdata);

/**
 * Publish a message of type b using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int b_publish(zcm_t *zcm, const char *channel, const b *msg);

/**
 * Subscribe to messages of type b using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to b_unsubscribe.
 */
b_subscription_t* b_subscribe(zcm_t *zcm, const char *channel, b_handler_t handler, void *userdata);

/**
 * Removes and destroys a subscription created by b_subscribe()
 */
int b_unsubscribe(zcm_t *zcm, b_subscription_t* hid);
/**
 * Encode a message of type b into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to b_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int b_encode(void *buf, int offset, int maxlen, const b *p);

/**
 * Decode a message of type b from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with b_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int b_decode(const void *buf, int offset, int maxlen, b *msg);

/**
 * Release resources allocated by b_decode()
 * @return 0
 */
int b_decode_cleanup(b *p);

/**
 * Check how many bytes are required to encode a message of type b
 */
int b_encoded_size(const b *p);

// ZCM support functions. Users should not call these
int64_t __b_get_hash(void);
uint64_t __b_hash_recursive(const __zcm_hash_ptr *p);
int     __b_encode_array(void *buf, int offset, int maxlen, const b *p, int elements);
int     __b_decode_array(const void *buf, int offset, int maxlen, b *p, int elements);
int     __b_decode_array_cleanup(b *p, int elements);
int     __b_encoded_array_size(const b *p, int elements);
int     __b_clone_array(const b *p, b *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
