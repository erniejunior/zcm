/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package zcmtypes;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class array_var_size1 implements zcm.zcm.ZCMEncodable
{
    public byte k1;
    public short k2;
    public int k3;
    public long k4;
    public byte i8_1[];
    public byte i8_2[];
    public byte i8_3[];
    public byte i8_4[];
    public short i16_1[];
    public short i16_2[];
    public short i16_3[];
    public short i16_4[];
    public int i32_1[];
    public int i32_2[];
    public int i32_3[];
    public int i32_4[];
    public long i64_1[];
    public long i64_2[];
    public long i64_3[];
    public long i64_4[];
    public float f_1[];
    public float f_2[];
    public float f_3[];
    public float f_4[];
    public double d_1[];
    public double d_2[];
    public double d_3[];
    public double d_4[];
    public String s_1[];
    public String s_2[];
    public String s_3[];
    public String s_4[];
    public boolean bl_1[];
    public boolean bl_2[];
    public boolean bl_3[];
    public boolean bl_4[];
    public byte b_1[];
    public byte b_2[];
    public byte b_3[];
    public byte b_4[];
 
    public array_var_size1()
    {
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0xd3b4ee3fab9e2e02L;
 
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(zcmtypes.array_var_size1.class))
            return 0L;
 
        classes.add(zcmtypes.array_var_size1.class);
        long hash = ZCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeByte(this.k1); 
 
        outs.writeShort(this.k2); 
 
        outs.writeInt(this.k3); 
 
        outs.writeLong(this.k4); 
 
        if (this.k1 > 0)
            outs.write(this.i8_1, 0, k1);
 
        if (this.k2 > 0)
            outs.write(this.i8_2, 0, k2);
 
        if (this.k3 > 0)
            outs.write(this.i8_3, 0, k3);
 
        if (this.k4 > 0)
            outs.write(this.i8_4, 0, k4);
 
        for (int a = 0; a < this.k1; a++) {
            outs.writeShort(this.i16_1[a]); 
        }
 
        for (int a = 0; a < this.k2; a++) {
            outs.writeShort(this.i16_2[a]); 
        }
 
        for (int a = 0; a < this.k3; a++) {
            outs.writeShort(this.i16_3[a]); 
        }
 
        for (int a = 0; a < this.k4; a++) {
            outs.writeShort(this.i16_4[a]); 
        }
 
        for (int a = 0; a < this.k1; a++) {
            outs.writeInt(this.i32_1[a]); 
        }
 
        for (int a = 0; a < this.k2; a++) {
            outs.writeInt(this.i32_2[a]); 
        }
 
        for (int a = 0; a < this.k3; a++) {
            outs.writeInt(this.i32_3[a]); 
        }
 
        for (int a = 0; a < this.k4; a++) {
            outs.writeInt(this.i32_4[a]); 
        }
 
        for (int a = 0; a < this.k1; a++) {
            outs.writeLong(this.i64_1[a]); 
        }
 
        for (int a = 0; a < this.k2; a++) {
            outs.writeLong(this.i64_2[a]); 
        }
 
        for (int a = 0; a < this.k3; a++) {
            outs.writeLong(this.i64_3[a]); 
        }
 
        for (int a = 0; a < this.k4; a++) {
            outs.writeLong(this.i64_4[a]); 
        }
 
        for (int a = 0; a < this.k1; a++) {
            outs.writeFloat(this.f_1[a]); 
        }
 
        for (int a = 0; a < this.k2; a++) {
            outs.writeFloat(this.f_2[a]); 
        }
 
        for (int a = 0; a < this.k3; a++) {
            outs.writeFloat(this.f_3[a]); 
        }
 
        for (int a = 0; a < this.k4; a++) {
            outs.writeFloat(this.f_4[a]); 
        }
 
        for (int a = 0; a < this.k1; a++) {
            outs.writeDouble(this.d_1[a]); 
        }
 
        for (int a = 0; a < this.k2; a++) {
            outs.writeDouble(this.d_2[a]); 
        }
 
        for (int a = 0; a < this.k3; a++) {
            outs.writeDouble(this.d_3[a]); 
        }
 
        for (int a = 0; a < this.k4; a++) {
            outs.writeDouble(this.d_4[a]); 
        }
 
        for (int a = 0; a < this.k1; a++) {
            __strbuf = new char[this.s_1[a].length()]; this.s_1[a].getChars(0, this.s_1[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.k2; a++) {
            __strbuf = new char[this.s_2[a].length()]; this.s_2[a].getChars(0, this.s_2[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.k3; a++) {
            __strbuf = new char[this.s_3[a].length()]; this.s_3[a].getChars(0, this.s_3[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.k4; a++) {
            __strbuf = new char[this.s_4[a].length()]; this.s_4[a].getChars(0, this.s_4[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.k1; a++) {
            outs.writeByte( this.bl_1[a] ? 1 : 0); 
        }
 
        for (int a = 0; a < this.k2; a++) {
            outs.writeByte( this.bl_2[a] ? 1 : 0); 
        }
 
        for (int a = 0; a < this.k3; a++) {
            outs.writeByte( this.bl_3[a] ? 1 : 0); 
        }
 
        for (int a = 0; a < this.k4; a++) {
            outs.writeByte( this.bl_4[a] ? 1 : 0); 
        }
 
        if (this.k1 > 0)
            outs.write(this.b_1, 0, k1);
 
        if (this.k2 > 0)
            outs.write(this.b_2, 0, k2);
 
        if (this.k3 > 0)
            outs.write(this.b_3, 0, k3);
 
        if (this.k4 > 0)
            outs.write(this.b_4, 0, k4);
 
    }
 
    public array_var_size1(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public array_var_size1(DataInput ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static zcmtypes.array_var_size1 _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        zcmtypes.array_var_size1 o = new zcmtypes.array_var_size1();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.k1 = ins.readByte();
 
        this.k2 = ins.readShort();
 
        this.k3 = ins.readInt();
 
        this.k4 = ins.readLong();
 
        this.i8_1 = new byte[(int) k1];
        ins.readFully(this.i8_1, 0, k1); 
        this.i8_2 = new byte[(int) k2];
        ins.readFully(this.i8_2, 0, k2); 
        this.i8_3 = new byte[(int) k3];
        ins.readFully(this.i8_3, 0, k3); 
        this.i8_4 = new byte[(int) k4];
        ins.readFully(this.i8_4, 0, k4); 
        this.i16_1 = new short[(int) k1];
        for (int a = 0; a < this.k1; a++) {
            this.i16_1[a] = ins.readShort();
        }
 
        this.i16_2 = new short[(int) k2];
        for (int a = 0; a < this.k2; a++) {
            this.i16_2[a] = ins.readShort();
        }
 
        this.i16_3 = new short[(int) k3];
        for (int a = 0; a < this.k3; a++) {
            this.i16_3[a] = ins.readShort();
        }
 
        this.i16_4 = new short[(int) k4];
        for (int a = 0; a < this.k4; a++) {
            this.i16_4[a] = ins.readShort();
        }
 
        this.i32_1 = new int[(int) k1];
        for (int a = 0; a < this.k1; a++) {
            this.i32_1[a] = ins.readInt();
        }
 
        this.i32_2 = new int[(int) k2];
        for (int a = 0; a < this.k2; a++) {
            this.i32_2[a] = ins.readInt();
        }
 
        this.i32_3 = new int[(int) k3];
        for (int a = 0; a < this.k3; a++) {
            this.i32_3[a] = ins.readInt();
        }
 
        this.i32_4 = new int[(int) k4];
        for (int a = 0; a < this.k4; a++) {
            this.i32_4[a] = ins.readInt();
        }
 
        this.i64_1 = new long[(int) k1];
        for (int a = 0; a < this.k1; a++) {
            this.i64_1[a] = ins.readLong();
        }
 
        this.i64_2 = new long[(int) k2];
        for (int a = 0; a < this.k2; a++) {
            this.i64_2[a] = ins.readLong();
        }
 
        this.i64_3 = new long[(int) k3];
        for (int a = 0; a < this.k3; a++) {
            this.i64_3[a] = ins.readLong();
        }
 
        this.i64_4 = new long[(int) k4];
        for (int a = 0; a < this.k4; a++) {
            this.i64_4[a] = ins.readLong();
        }
 
        this.f_1 = new float[(int) k1];
        for (int a = 0; a < this.k1; a++) {
            this.f_1[a] = ins.readFloat();
        }
 
        this.f_2 = new float[(int) k2];
        for (int a = 0; a < this.k2; a++) {
            this.f_2[a] = ins.readFloat();
        }
 
        this.f_3 = new float[(int) k3];
        for (int a = 0; a < this.k3; a++) {
            this.f_3[a] = ins.readFloat();
        }
 
        this.f_4 = new float[(int) k4];
        for (int a = 0; a < this.k4; a++) {
            this.f_4[a] = ins.readFloat();
        }
 
        this.d_1 = new double[(int) k1];
        for (int a = 0; a < this.k1; a++) {
            this.d_1[a] = ins.readDouble();
        }
 
        this.d_2 = new double[(int) k2];
        for (int a = 0; a < this.k2; a++) {
            this.d_2[a] = ins.readDouble();
        }
 
        this.d_3 = new double[(int) k3];
        for (int a = 0; a < this.k3; a++) {
            this.d_3[a] = ins.readDouble();
        }
 
        this.d_4 = new double[(int) k4];
        for (int a = 0; a < this.k4; a++) {
            this.d_4[a] = ins.readDouble();
        }
 
        this.s_1 = new String[(int) k1];
        for (int a = 0; a < this.k1; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.s_1[a] = new String(__strbuf);
        }
 
        this.s_2 = new String[(int) k2];
        for (int a = 0; a < this.k2; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.s_2[a] = new String(__strbuf);
        }
 
        this.s_3 = new String[(int) k3];
        for (int a = 0; a < this.k3; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.s_3[a] = new String(__strbuf);
        }
 
        this.s_4 = new String[(int) k4];
        for (int a = 0; a < this.k4; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.s_4[a] = new String(__strbuf);
        }
 
        this.bl_1 = new boolean[(int) k1];
        for (int a = 0; a < this.k1; a++) {
            this.bl_1[a] = ins.readByte()!=0;
        }
 
        this.bl_2 = new boolean[(int) k2];
        for (int a = 0; a < this.k2; a++) {
            this.bl_2[a] = ins.readByte()!=0;
        }
 
        this.bl_3 = new boolean[(int) k3];
        for (int a = 0; a < this.k3; a++) {
            this.bl_3[a] = ins.readByte()!=0;
        }
 
        this.bl_4 = new boolean[(int) k4];
        for (int a = 0; a < this.k4; a++) {
            this.bl_4[a] = ins.readByte()!=0;
        }
 
        this.b_1 = new byte[(int) k1];
        ins.readFully(this.b_1, 0, k1); 
        this.b_2 = new byte[(int) k2];
        ins.readFully(this.b_2, 0, k2); 
        this.b_3 = new byte[(int) k3];
        ins.readFully(this.b_3, 0, k3); 
        this.b_4 = new byte[(int) k4];
        ins.readFully(this.b_4, 0, k4); 
    }
 
    public zcmtypes.array_var_size1 copy()
    {
        zcmtypes.array_var_size1 outobj = new zcmtypes.array_var_size1();
        outobj.k1 = this.k1;
 
        outobj.k2 = this.k2;
 
        outobj.k3 = this.k3;
 
        outobj.k4 = this.k4;
 
        outobj.i8_1 = new byte[(int) k1];
        if (this.k1 > 0)
            System.arraycopy(this.i8_1, 0, outobj.i8_1, 0, this.k1); 
        outobj.i8_2 = new byte[(int) k2];
        if (this.k2 > 0)
            System.arraycopy(this.i8_2, 0, outobj.i8_2, 0, this.k2); 
        outobj.i8_3 = new byte[(int) k3];
        if (this.k3 > 0)
            System.arraycopy(this.i8_3, 0, outobj.i8_3, 0, this.k3); 
        outobj.i8_4 = new byte[(int) k4];
        if (this.k4 > 0)
            System.arraycopy(this.i8_4, 0, outobj.i8_4, 0, this.k4); 
        outobj.i16_1 = new short[(int) k1];
        if (this.k1 > 0)
            System.arraycopy(this.i16_1, 0, outobj.i16_1, 0, this.k1); 
        outobj.i16_2 = new short[(int) k2];
        if (this.k2 > 0)
            System.arraycopy(this.i16_2, 0, outobj.i16_2, 0, this.k2); 
        outobj.i16_3 = new short[(int) k3];
        if (this.k3 > 0)
            System.arraycopy(this.i16_3, 0, outobj.i16_3, 0, this.k3); 
        outobj.i16_4 = new short[(int) k4];
        if (this.k4 > 0)
            System.arraycopy(this.i16_4, 0, outobj.i16_4, 0, this.k4); 
        outobj.i32_1 = new int[(int) k1];
        if (this.k1 > 0)
            System.arraycopy(this.i32_1, 0, outobj.i32_1, 0, this.k1); 
        outobj.i32_2 = new int[(int) k2];
        if (this.k2 > 0)
            System.arraycopy(this.i32_2, 0, outobj.i32_2, 0, this.k2); 
        outobj.i32_3 = new int[(int) k3];
        if (this.k3 > 0)
            System.arraycopy(this.i32_3, 0, outobj.i32_3, 0, this.k3); 
        outobj.i32_4 = new int[(int) k4];
        if (this.k4 > 0)
            System.arraycopy(this.i32_4, 0, outobj.i32_4, 0, this.k4); 
        outobj.i64_1 = new long[(int) k1];
        if (this.k1 > 0)
            System.arraycopy(this.i64_1, 0, outobj.i64_1, 0, this.k1); 
        outobj.i64_2 = new long[(int) k2];
        if (this.k2 > 0)
            System.arraycopy(this.i64_2, 0, outobj.i64_2, 0, this.k2); 
        outobj.i64_3 = new long[(int) k3];
        if (this.k3 > 0)
            System.arraycopy(this.i64_3, 0, outobj.i64_3, 0, this.k3); 
        outobj.i64_4 = new long[(int) k4];
        if (this.k4 > 0)
            System.arraycopy(this.i64_4, 0, outobj.i64_4, 0, this.k4); 
        outobj.f_1 = new float[(int) k1];
        if (this.k1 > 0)
            System.arraycopy(this.f_1, 0, outobj.f_1, 0, this.k1); 
        outobj.f_2 = new float[(int) k2];
        if (this.k2 > 0)
            System.arraycopy(this.f_2, 0, outobj.f_2, 0, this.k2); 
        outobj.f_3 = new float[(int) k3];
        if (this.k3 > 0)
            System.arraycopy(this.f_3, 0, outobj.f_3, 0, this.k3); 
        outobj.f_4 = new float[(int) k4];
        if (this.k4 > 0)
            System.arraycopy(this.f_4, 0, outobj.f_4, 0, this.k4); 
        outobj.d_1 = new double[(int) k1];
        if (this.k1 > 0)
            System.arraycopy(this.d_1, 0, outobj.d_1, 0, this.k1); 
        outobj.d_2 = new double[(int) k2];
        if (this.k2 > 0)
            System.arraycopy(this.d_2, 0, outobj.d_2, 0, this.k2); 
        outobj.d_3 = new double[(int) k3];
        if (this.k3 > 0)
            System.arraycopy(this.d_3, 0, outobj.d_3, 0, this.k3); 
        outobj.d_4 = new double[(int) k4];
        if (this.k4 > 0)
            System.arraycopy(this.d_4, 0, outobj.d_4, 0, this.k4); 
        outobj.s_1 = new String[(int) k1];
        if (this.k1 > 0)
            System.arraycopy(this.s_1, 0, outobj.s_1, 0, this.k1); 
        outobj.s_2 = new String[(int) k2];
        if (this.k2 > 0)
            System.arraycopy(this.s_2, 0, outobj.s_2, 0, this.k2); 
        outobj.s_3 = new String[(int) k3];
        if (this.k3 > 0)
            System.arraycopy(this.s_3, 0, outobj.s_3, 0, this.k3); 
        outobj.s_4 = new String[(int) k4];
        if (this.k4 > 0)
            System.arraycopy(this.s_4, 0, outobj.s_4, 0, this.k4); 
        outobj.bl_1 = new boolean[(int) k1];
        if (this.k1 > 0)
            System.arraycopy(this.bl_1, 0, outobj.bl_1, 0, this.k1); 
        outobj.bl_2 = new boolean[(int) k2];
        if (this.k2 > 0)
            System.arraycopy(this.bl_2, 0, outobj.bl_2, 0, this.k2); 
        outobj.bl_3 = new boolean[(int) k3];
        if (this.k3 > 0)
            System.arraycopy(this.bl_3, 0, outobj.bl_3, 0, this.k3); 
        outobj.bl_4 = new boolean[(int) k4];
        if (this.k4 > 0)
            System.arraycopy(this.bl_4, 0, outobj.bl_4, 0, this.k4); 
        outobj.b_1 = new byte[(int) k1];
        if (this.k1 > 0)
            System.arraycopy(this.b_1, 0, outobj.b_1, 0, this.k1); 
        outobj.b_2 = new byte[(int) k2];
        if (this.k2 > 0)
            System.arraycopy(this.b_2, 0, outobj.b_2, 0, this.k2); 
        outobj.b_3 = new byte[(int) k3];
        if (this.k3 > 0)
            System.arraycopy(this.b_3, 0, outobj.b_3, 0, this.k3); 
        outobj.b_4 = new byte[(int) k4];
        if (this.k4 > 0)
            System.arraycopy(this.b_4, 0, outobj.b_4, 0, this.k4); 
        return outobj;
    }
 
}

